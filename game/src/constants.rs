
use macroquad::{
	prelude::KeyCode,
};


pub const NUMBERS: [KeyCode; 10] = [
	KeyCode::Key0,
	KeyCode::Key1,
	KeyCode::Key2,
	KeyCode::Key3,
	KeyCode::Key4,
	KeyCode::Key5,
	KeyCode::Key6,
	KeyCode::Key7,
	KeyCode::Key8,
	KeyCode::Key9,
];

pub const TYPEABLE: [KeyCode; 37] = [
	KeyCode::Key0,
	KeyCode::Key1,
	KeyCode::Key2,
	KeyCode::Key3,
	KeyCode::Key4,
	KeyCode::Key5,
	KeyCode::Key6,
	KeyCode::Key7,
	KeyCode::Key8,
	KeyCode::Key9,
	KeyCode::A,
	KeyCode::B,
	KeyCode::C,
	KeyCode::D,
	KeyCode::E,
	KeyCode::F,
	KeyCode::G,
	KeyCode::H,
	KeyCode::I,
	KeyCode::J,
	KeyCode::K,
	KeyCode::L,
	KeyCode::M,
	KeyCode::N,
	KeyCode::O,
	KeyCode::P,
	KeyCode::Q,
	KeyCode::R,
	KeyCode::S,
	KeyCode::T,
	KeyCode::U,
	KeyCode::V,
	KeyCode::W,
	KeyCode::X,
	KeyCode::Y,
	KeyCode::Z,
	KeyCode::Space,
];

pub fn key_to_char(value: KeyCode) -> char {
	return match value {
		KeyCode::Key0 => '0',
		KeyCode::Key1 => '1',
		KeyCode::Key2 => '2',
		KeyCode::Key3 => '3',
		KeyCode::Key4 => '4',
		KeyCode::Key5 => '5',
		KeyCode::Key6 => '6',
		KeyCode::Key7 => '7',
		KeyCode::Key8 => '8',
		KeyCode::Key9 => '9',
		KeyCode::A => 'a',
		KeyCode::B => 'b',
		KeyCode::C => 'c',
		KeyCode::D => 'd',
		KeyCode::E => 'e',
		KeyCode::F => 'f',
		KeyCode::G => 'g',
		KeyCode::H => 'h',
		KeyCode::I => 'i',
		KeyCode::J => 'j',
		KeyCode::K => 'k',
		KeyCode::L => 'l',
		KeyCode::M => 'm',
		KeyCode::N => 'n',
		KeyCode::O => 'o',
		KeyCode::P => 'p',
		KeyCode::Q => 'q',
		KeyCode::R => 'r',
		KeyCode::S => 's',
		KeyCode::T => 't',
		KeyCode::U => 'u',
		KeyCode::V => 'v',
		KeyCode::W => 'w',
		KeyCode::X => 'x',
		KeyCode::Y => 'y',
		KeyCode::Z => 'z',
		KeyCode::Space => ' ',
		_ => ' ',
	}
}
